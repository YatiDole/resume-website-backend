AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloud Resume Application

Globals:
  Function:
    Timeout: 10
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  DomainName:
    Description: "The name of the website this stack will be deployed for"
    Type: String
    Default: ${{ secrets.DOMAIN_NAME }}

Resources:
#lambda function 
  visitCountFunction:
    Type: AWS::Serverless::Function
    Properties:
    CodeUri: Lambda/
    Handler: counter.getCounter
    Runtime: python3.8
    Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref myDynamoDBTable
    Role: !GetAtt IAMRole.Arn
    Events:
      getCounter:
        Type: Api
        Properties:
          Path: /getVisitorCounter
          Method: post

# DynamoDB Table
  myDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WebsiteVisitCounts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "Website"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Website"
          KeyType: "HASH"
    DependsOn:
      - IAMRole

# Lambda role for lambda function to access DynamoDB
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
             - 'sts:AssumeRole'
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${myDynamoDBTable}"  
            Effect: Allow
            Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'


  MyDomainName:
   Type: 'AWS::ApiGateway::DomainName'
   Properties:
    DomainName: ${{ secrets.DOMAIN_NAME }}
    EndpointConfiguration:
     Types: 
      - REGIONAL
    RegionalCertificateArn:  ${{ secrets.ARN_CERTIFICATE }}


  myMapping:
   Type: 'AWS::ApiGateway::BasePathMapping'
   Properties:
     DomainName: !Ref MyDomainName
     RestApiId: !Ref ApiGatewayApi
    
  DNSRecordAPIGateway:
     Type: AWS::Route53::RecordSet
     Properties:
       HostedZoneId : !Ref HostedZone
       Name: !Sub "api.${{ secrets.DOMAIN_NAME }}"
       TTL: 300
       ResourceRecords:
         - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
       Type: CNAME

Outputs:
  VisitorCounterApiEndpoint :
    Description: "API Gateway endpoint URL for Count Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getVisitorCounter/"
  
  visitCountFunction:
    Description: "Count Function ARN"
    Value: !GetAtt visitCountFunction.Arn

  IAMRole:
    Description: "Implicit IAM Role created for Cloud Resume Count function"
    Value: !GetAtt IAMRole.Arn