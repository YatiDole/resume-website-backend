AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloud Resume Application
Parameters:
  DomainName:
    Description: "The name of the website this stack will be deployed for"
    Type: String
    Default: "yatidole.com"

Resources:
#lambda function 
  visitCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/
      Handler: counter.getCounter
      Runtime: python3.8
      Role: !GetAtt IAMRole.Arn
      Events:
        getCounter:
          Type: Api
          Properties:
            Path: /getVisitorCounter
            Method: get
            RestApiId: !Ref ApiGatewayApi

# DynamoDB Table
  myDynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: pagename
        Type: String
    DependsOn:
      - IAMRole

# API-Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,Z-Client-Timezone'"
        AllowOrigin: "''"
        MaxAge: "'3600'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT,DELETE'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'*'"

# CloudFront OAI              
  cloudfrontoriginaccessidentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig: ${{ secrets.CLOUDFRONT_OAI }}
      Comment: This is origin access identity
  
      
  apiDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: ${{ secrets.HOSTED_ZONE_ID }}
      RecordSets:
        - Name: api.yatidole.com
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MyDomainName.RegionalHostedZoneId
            DNSName: !GetAtt MyDomainName.RegionalDomainName

# CloudFront Distribution which is able to access S3
  myDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: ${{ secrets.DOMAIN_NAME }}
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref cloudfrontoriginaccessidentity ] ]
        Enabled: 'true'
        Comment: Some comment
        DefaultRootObject: index.html
        Aliases:
        - yatidole.com
        - www.yatidole.com
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 60
          MaxTTL: 120
          MinTTL: 30
        PriceClass: PriceClass_200
        ViewerCertificate:
           AcmCertificateArn: ${{ secrets.ARN_CERTIFICATE }}
           SslSupportMethod: sni-only

# Lambda role for lambda function to access DynamoDB
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
             - 'sts:AssumeRole'
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${myDynamoDBTable}"  
            Effect: Allow
            Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'


  MyDomainName:
   Type: 'AWS::ApiGateway::DomainName'
   Properties:
    DomainName: ${{ secrets.DOMAIN_NAME }}
    EndpointConfiguration:
     Types: 
      - REGIONAL
    RegionalCertificateArn:  ${{ secrets.ARN_CERTIFICATE }}

  myMapping:
   Type: 'AWS::ApiGateway::BasePathMapping'
   Properties:
     DomainName: !Ref MyDomainName
     RestApiId: !Ref ApiGatewayApi
    
  DNSRecordAPIGateway:
     Type: AWS::Route53::RecordSet
     Properties:
       HostedZoneId : !Ref HostedZone
       Name: !Sub "api.${{ secrets.DOMAIN_NAME }}"
       TTL: 300
       ResourceRecords:
         - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
       Type: CNAME
       
  CFDNSOne:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: ${{ secrets.HOSTED_ZONE_ID }}
      RecordSets:
        - Name: yatidole.com
          Type: A
          AliasTarget:
            DNSName: !GetAtt myDistribution.DomainName

  CFDNSTwo:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: ${{ secrets.HOSTED_ZONE_ID }}
      RecordSets:
        - Name: www.yatidole.com
          Type: A
          AliasTarget:
            DNSName: !GetAtt myDistribution.DomainName

Outputs:
  VisitorCounterApiEndpoint :
    Description: "API Gateway endpoint URL for Count Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getVisitorCounter/"
  
  visitCountFunction:
    Description: "Count Function ARN"
    Value: !GetAtt visitCountFunction.Arn