AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloud Resume Application

Parameters:
  DomainName:
    Description: "The name of the website this stack will be deployed for"
    Type: String
    Default: yatidole.com

Resources:
#lambda function 
  samfunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      CodeUri: Lambda/
      MemorySize: 128
      Timeout: 3
      Environment:
        Variables:
          TABLE_NAME: !Ref myDynamoDBTable
          REGION_NAME: !Ref AWS::Region
      Role: !GetAtt IAMRole.Arn
      Events:
        - http:
          getsitesAPI:
          Type: Api
          Properties:
            Path: /count
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref myDynamoDBTable     

# DynamoDB Table
  myDynamoDBTable:
    Type: AWS::DynamoDB::SimpleTable
    Properties:
      PrimaryKey: 
        Name: id
        Type: String

# Lambda role for lambda function to access DynamoDB
#  IAMRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#             - 'sts:AssumeRole'
#      Policies:
#        - PolicyName: dynamodbAccessRole
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${myDynamoDBTable}"  
#            Effect: Allow
#            Action:
#                  - 'dynamodb:GetItem'
#                  - 'dynamodb:UpdateItem'
#                  - 'dynamodb:Scan'
#                  - 'dynamodb:Query'
#                  - 'dynamodb:DeleteItem'
#                  - 'dynamodb:PutItem'


#  MyDomainName:
#   Type: 'AWS::ApiGateway::DomainName'
#   Properties:
#    DomainName: ${{ secrets.DOMAIN_NAME }}
#    EndpointConfiguration:
#     Types: 
#      - REGIONAL
#    RegionalCertificateArn:  ${{ secrets.ARN_CERTIFICATE }}


#  myMapping:
#   Type: 'AWS::ApiGateway::BasePathMapping'
#   Properties:
#     DomainName: !Ref MyDomainName
#     RestApiId: !Ref ApiGatewayApi
    
#  DNSRecordAPIGateway:
#     Type: AWS::Route53::RecordSet
#     Properties:
#       HostedZoneId : !Ref HostedZone
#       Name: !Sub "api.${{ secrets.DOMAIN_NAME }}"
#       TTL: 300
#       ResourceRecords:
#         - !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
#       Type: CNAME

# Outputs:
#  VisitorCounterApiEndpoint :
#    Description: "API Gateway endpoint URL for Count Function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/getVisitorCounter/"
  
#  visitCountFunction:
#    Description: "Count Function ARN"
#    Value: !GetAtt visitCountFunction.Arn

#  IAMRole:
#    Description: "Implicit IAM Role created for Cloud Resume Count function"
#    Value: !GetAtt IAMRole.Arn