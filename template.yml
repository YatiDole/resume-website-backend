AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloud Resume Application

Resources:

  CloudResumeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: counter.getCounter
      Runtime: python3.8
      Role: !GetAtt IAMRole.Arn
    DependsOn:
      - myDynamoDBTable
      CodeUri: ./Lambda
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-visitor-count
            Method: get
            RestApiId: !Ref ApiGatewayApi

  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "pagename"
          AttributeType: "S"
       
      KeySchema: 
        - 
          AttributeName: "pagename"
          KeyType: "HASH"
      
      TableName: "visitor_counter"
      ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
    DependsOn:
      - IAMRole

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,Z-Client-Timezone'"
        AllowOrigin: "''"
        MaxAge: "'3600'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT,DELETE'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'*'"

  cloudfrontoriginaccessidentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig: ${{ secrets.CLOUDFRONT_OAI }}
      Comment: This is origin access identity

  myDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: ${{ secrets.DOMAIN_NAME }}
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref cloudfrontoriginaccessidentity ] ]
        Enabled: 'true'
        Comment: Some comment
        DefaultRootObject: index.html
        Aliases:
        - yatidole.com
        - www.yatidole.com
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 60
          MaxTTL: 120
          MinTTL: 30
        PriceClass: PriceClass_200
        ViewerCertificate:
           AcmCertificateArn: ${{ secrets.ARN_CERTIFICATE }}
           SslSupportMethod: sni-only

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
             - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com  
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            Effect: Allow
            Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
            Resource: "*"
            Effect: Allow
            Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
            Resource: "*"

  MyDomainName:
   Type: 'AWS::ApiGateway::DomainName'
   Properties:
    DomainName: api.yatidole.com
    EndpointConfiguration:
     Types: 
      - REGIONAL
    RegionalCertificateArn:  ${{ secrets.ARN_CERTIFICATE }}

  myMapping:
   Type: 'AWS::ApiGateway::BasePathMapping'
   Properties:
     DomainName: !Ref MyDomainName
     RestApiId: !Ref ApiGatewayApi
 
  apiDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: ${{ secrets.HOSTED_ZONE_ID }}
      RecordSets:
        - Name: api.yatidole.com
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MyDomainName.RegionalHostedZoneId
            DNSName: !GetAtt MyDomainName.RegionalDomainName    

  CFDNSOne:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: ${{ secrets.HOSTED_ZONE_ID }}
      RecordSets:
        - Name: yatidole.com
          Type: A
          AliasTarget:
            DNSName: !GetAtt myDistribution.DomainName
  CFDNSTwo:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: ${{ secrets.HOSTED_ZONE_ID }}
      RecordSets:
        - Name: www.yatidole.com
          Type: A
          AliasTarget:
            DNSName: !GetAtt myDistribution.DomainName

Outputs:
  VisitorCounterApi:
    Description: "API Gateway endpoint URL for Count Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get-visitor-count/"

#  CloudResumeFunction:
#    Description: "Visitor count Lambda Function ARN"
#    Value: !GetAtt CloudResumeFunction.Arn
  
#  VisitorCountFunctionIamRole:
#    Description: "Implicit IAM Role created for visitor count function"
#   Value: !GetAtt VisitorCountFunctionRole.Arn